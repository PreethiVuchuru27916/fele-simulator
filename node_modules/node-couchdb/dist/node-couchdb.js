'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _crypto = _interopRequireDefault(require("crypto"));

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _abortController = _interopRequireDefault(require("abort-controller"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

// @see https://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options
// @see https://github.com/1999/node-couchdb/issues/9
var KEYS_TO_ENCODE = ['key', 'keys', 'startkey', 'endkey'];

var RequestError = /*#__PURE__*/function (_Error) {
  _inherits(RequestError, _Error);

  var _super = _createSuper(RequestError);

  function RequestError(code, message, body) {
    var _this;

    _classCallCheck(this, RequestError);

    _this = _super.call(this, message);
    _this.code = code;
    _this.body = body;
    return _this;
  }

  return _createClass(RequestError);
}( /*#__PURE__*/_wrapNativeSuper(Error));

var NodeCouchDB = /*#__PURE__*/function () {
  function NodeCouchDB() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, NodeCouchDB);

    var instanceOpts = Object.assign({
      protocol: 'http',
      host: '127.0.0.1',
      port: 5984,
      cache: null,
      timeout: 5000,
      auth: null
    }, opts);
    this._baseUrl = "".concat(instanceOpts.protocol, "://");
    this._baseUrl += "".concat(instanceOpts.host, ":").concat(instanceOpts.port);
    this._cache = instanceOpts.cache;
    this._timeoutMs = instanceOpts.timeout;
    var defaultHeaders = {
      'user-agent': 'node-couchdb/1',
      'content-type': 'application/json'
    };

    if (instanceOpts.auth) {
      var str = "".concat(instanceOpts.auth.user, ":").concat(instanceOpts.auth.pass);
      var b64 = Buffer.from(str, 'utf8').toString('base64');
      defaultHeaders['authorization'] = 'Basic ' + b64;
    }

    this._fetchDefaultOpts = {
      headers: defaultHeaders
    };
  }
  /**
   * Use new cache mechanism (an "invalidate" method of the old cache machanism will be invoked)
   * This method is useful if you want to call GC manually
   *
   * @param {Object} cacheObj
   * @return {Undefined}
   */


  _createClass(NodeCouchDB, [{
    key: "useCache",
    value: function useCache(cache) {
      try {
        this._cache.invalidate();
      } catch (e) {}

      this._cache = cache;
    }
    /**
     * Get the list of all databases. Returns a promise which is
     * - resolved with {Array} list of databases
     * - rejected with `request` original error
     *
     * @return {Promise}
     */

  }, {
    key: "listDatabases",
    value: function listDatabases() {
      return this._fetchWrapped("".concat(this._baseUrl, "/_all_dbs")).then(function (_ref) {
        var body = _ref.body;
        return body;
      });
    }
    /**
     * Creates a database. Returns a promise which is
     * - resolved with no arguments
     * - rejected with `request` original error
     *
     * @param {String} dbName
     * @return {Promise}
     */

  }, {
    key: "createDatabase",
    value: function createDatabase(dbName) {
      return this._fetchWrapped("".concat(this._baseUrl, "/").concat(dbName), {
        method: 'PUT'
      }).then(function (_ref2) {
        var res = _ref2.res,
            body = _ref2.body;

        // database already exists
        if (res.status === 412) {
          throw new RequestError('EDBEXISTS', "Database already exists: ".concat(dbName), body);
        }

        if (res.status === 401) {
          throw new RequestError('ENOTADMIN', "Should be authorized as admin to create database: ".concat(res.status), body);
        }

        if (res.status === 400) {
          throw new RequestError('EBADREQUEST', res.body.reason, body);
        }

        if (res.status !== 201 && res.status !== 202) {
          throw new RequestError('EUNKNOWN', "Unexpected status code while creating database ".concat(dbName, ": ").concat(res.status), body);
        }
      });
    }
    /**
     * Drops database by its name. Returns a promise which is
     * - resolved with no arguments
     * - rejected with `request` original error
     *
     * @param {String} dbName
     * @return {Promise}
     */

  }, {
    key: "dropDatabase",
    value: function dropDatabase(dbName) {
      var url = "".concat(this._baseUrl, "/").concat(dbName, "/");
      return this._fetchWrapped(url, {
        method: 'DELETE'
      }).then(function (_ref3) {
        var res = _ref3.res,
            body = _ref3.body;

        // database not found
        if (res.status === 404) {
          throw new RequestError('EDBMISSING', "Database not found: ".concat(dbName), body);
        }

        if (res.status === 401) {
          throw new RequestError('ENOTADMIN', "Should be authorized as admin to delete database: ".concat(res.status), body);
        }

        if (res.status !== 200 && res.status !== 202) {
          throw new RequestError('EUNKNOWN', "Unexpected status code while deleting database ".concat(dbName, ": ").concat(res.status), body);
        }
      });
    }
    /**
     * Fetch data from CouchDB. Returns a promise which is
     * - resolved with {data, headers, status} object
     * - rejected with `request` original error
     *
     * @param {String} dbName database name
     * @param {String} uri document ID or design view
     * @param {Object} [query] query options as key: value
     * @return {Promise}
     */

  }, {
    key: "get",
    value: function get(dbName, uri) {
      var _this2 = this;

      var query = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var url = new URL("".concat(this._baseUrl, "/").concat(dbName, "/").concat(uri));

      for (var prop in query) {
        if (KEYS_TO_ENCODE.includes(prop)) {
          url.searchParams.set(prop, JSON.stringify(query[prop]));
        } else {
          url.searchParams.set(prop, query[prop]);
        }
      }

      return this._fetchWrapped(url).then(function (_ref4) {
        var res = _ref4.res,
            body = _ref4.body;

        if (res.status === 404) {
          throw new RequestError('EDOCMISSING', 'Document is not found', body);
        }

        if (res.status !== 200 && res.status !== 304) {
          throw new RequestError('EUNKNOWN', "Unexpected status code while fetching documents from the database: ".concat(res.status), body);
        }

        if (res.status === 200 && _this2._cache) {
          var cacheKey = _this2._getCacheKey(url);

          _this2._cache.set(cacheKey, {
            body: body,
            etag: res.headers.get('ETag')
          });
        }

        return {
          data: body,
          headers: res.headers,
          status: res.status
        };
      });
    }
    /**
     * Fetch attachment from CouchDB. Returns a promise which is
     * - resolved with {data, headers, status} object
     * - rejected with `request` original error
     *
     * @param {String} dbName database name
     * @param {String} docId document id
     * @param {String} attachmentName attachment name
     * @param {String} docRevision document revision
     * @return {Promise}
     */

  }, {
    key: "getAttachment",
    value: function getAttachment(dbName, docId, attachmentName, docRevision) {
      var _this3 = this;

      var url = new URL("".concat(this._baseUrl, "/").concat(dbName, "/").concat(docId, "/").concat(attachmentName));
      url.searchParams.set('rev', docRevision);
      return this._fetchWrapped(url).then(function (_ref5) {
        var res = _ref5.res,
            body = _ref5.body;

        if (res.status === 404) {
          throw new RequestError('EDOCMISSING', 'Attachment is not found', body);
        }

        if (res.status !== 200 && res.status !== 304) {
          throw new RequestError('EUNKNOWN', "Unexpected status code while fetching attachment from the database: ".concat(res.status), body);
        }

        if (res.status === 200 && _this3._cache) {
          var cacheKey = _this3._getCacheKey(url);

          _this3._cache.set(cacheKey, {
            body: body,
            etag: res.headers.get('ETag')
          });
        }

        return {
          data: body,
          headers: res.headers,
          status: res.status
        };
      });
    }
    /**
     * Insert document into CouchDB. Returns a promise which is
     * - resolved with {data, headers, status} object
     * - rejected with `request` original error
     *
     * @param {String} dbName database name
     * @param {Object} data
     * @return {Promise}
     */

  }, {
    key: "insert",
    value: function insert(dbName, data) {
      var _this4 = this;

      var url = "".concat(this._baseUrl, "/").concat(dbName);
      return this._fetchWrapped(url, {
        method: 'POST',
        body: JSON.stringify(data)
      }).then(function (_ref6) {
        var res = _ref6.res,
            body = _ref6.body;

        _this4._checkDocumentManipulationStatus(res.status, body);

        if (res.status !== 201 && res.status !== 202) {
          throw new RequestError('EUNKNOWN', "Unexpected status code while inserting document into the database: ".concat(res.status), body);
        }

        return {
          data: body,
          headers: res.headers,
          status: res.status
        };
      });
    }
    /**
     * Insert document into CouchDB. Returns a promise which is
     * - resolved with {data, headers, status} object
     * - rejected with `request` original error
     *
     * @param {String} dbName database name
     * @param {String} docId document id
     * @param {String} attachmentName attachment name
     * @param {String} body attachment body
     * @param {String} docRevision document revision
     * @return {Promise}
     */

  }, {
    key: "insertAttachment",
    value: function insertAttachment(dbName, docId, attachmentName, body, docRevision) {
      var url = new URL("".concat(this._baseUrl, "/").concat(dbName, "/").concat(encodeURIComponent(docId), "/attachment"));
      url.searchParams.set('rev', docRevision);
      return this._fetchWrapped(url, {
        method: 'PUT',
        body: JSON.stringify(body)
      }).then(function (_ref7) {
        var res = _ref7.res,
            body = _ref7.body;

        if (res.status === 409) {
          throw new RequestError('EDOCCONFLICT', 'Document insert conflict - Document’s revision wasn’t specified or it’s not the latest', body);
        }

        return {
          data: body,
          headers: res.headers,
          status: res.status
        };
      });
    }
    /**
     * Update a document in CouchDB. Returns a promise which is
     * - resolved with {data, headers, status} object
     * - rejected with `request` original error
     *
     * @param {String} dbName database name
     * @param {Object} data should contain both "_id" and "_rev" fields
     * @return {Promise}
     */

  }, {
    key: "update",
    value: function update(dbName, data) {
      var _this5 = this;

      if (!data._id || !data._rev) {
        var err = new Error('Both _id and _rev fields should exist when updating the document');
        err.code = 'EFIELDMISSING';
        return Promise.reject(err);
      }

      var url = "".concat(this._baseUrl, "/").concat(dbName, "/").concat(encodeURIComponent(data._id));
      return this._fetchWrapped(url, {
        method: 'PUT',
        body: JSON.stringify(data)
      }).then(function (_ref8) {
        var res = _ref8.res,
            body = _ref8.body;

        _this5._checkDocumentManipulationStatus(res.status, body);

        if (!(res.status >= 200 && res.status <= 202)) {
          throw new RequestError('EUNKNOWN', "Unexpected status code while inserting document into the database: ".concat(res.status), body);
        }

        return {
          data: body,
          headers: res.headers,
          status: res.status
        };
      });
    }
    /**
     * Delete a document in the database. Returns a promise which is
     * - resolved with {data, headers, status} object
     * - rejected with `request` original error
     *
     * @param {String} dbName database name
     * @param {String} docId document id
     * @param {String} docRevision document revision
     * @return {Promise}
     */

  }, {
    key: "del",
    value: function del(dbName, docId, docRevision) {
      var _this6 = this;

      var url = new URL("".concat(this._baseUrl, "/").concat(dbName, "/").concat(encodeURIComponent(docId)));
      url.searchParams.set('rev', docRevision);
      return this._fetchWrapped(url, {
        method: 'DELETE'
      }).then(function (_ref9) {
        var res = _ref9.res,
            body = _ref9.body;

        _this6._checkDocumentManipulationStatus(res.status, body);

        if (res.status !== 200) {
          throw new RequestError('EUNKNOWN', "Unexpected status code while deleting document: ".concat(res.status), body);
        }

        return {
          data: body,
          headers: res.headers,
          status: res.status
        };
      });
    }
    /**
     * Fetch data from CouchDB using Mango API. Returns a promise which is
     * - resolved with {data, headers, status} object
     * - rejected with `request` original error
     *
     * @param {String} dbName database name
     * @param {String|Object} mangoQuery Mango query as json string or javascript object
     * @param {Object} [query] query options as key: value
     * @return {Promise}
     */

  }, {
    key: "mango",
    value: function mango(dbName, mangoQuery) {
      var _this7 = this;

      var url = new URL("".concat(this._baseUrl, "/").concat(dbName, "/_find"));

      if (typeof mangoQuery === 'string') {
        try {
          mangoQuery = JSON.parse(mangoQuery);
        } catch (e) {
          return Promise.reject(new RequestError('EBADREQUEST', 'The Mango query parameter is not parsable.'));
        }
      }

      if (_typeof(mangoQuery) !== 'object') {
        return Promise.reject(new RequestError('EBADREQUEST', 'Invalid Mango query parameter.'));
      }

      var requestOpts = {
        method: 'POST',
        body: JSON.stringify(mangoQuery)
      };
      return this._fetchWrapped(url, requestOpts).then(function (_ref10) {
        var res = _ref10.res,
            body = _ref10.body;

        _this7._checkServerVersion(res.headers.get('Server'), 2);

        if (res.status === 404) {
          throw new RequestError('EDOCMISSING', 'Document is not found', body);
        }

        if (res.status !== 200 && res.status !== 304) {
          throw new RequestError('EUNKNOWN', "Unexpected status code while fetching documents from the database: ".concat(res.status), body);
        }

        return {
          data: body,
          headers: res.headers,
          status: res.status
        };
      });
    }
    /**
     * Delete a document in the database. Returns a promise which is
     * - resolved with {data, headers, status} object
     * - rejected with `request` original error
     *
     * @param {String} dbName database name
     * @param {String} docId document id
     * @param {String} attachmentName attachment name
     * @param {String} docRevision document revision
     * @return {Promise}
     */

  }, {
    key: "delAttachment",
    value: function delAttachment(dbName, docId, attachmentName, docRevision) {
      var url = new URL("".concat(this._baseUrl, "/").concat(dbName, "/").concat(encodeURIComponent(docId), "/").concat(encodeURIComponent(attachmentName)));
      url.searchParams.set('rev', docRevision);
      return this._fetchWrapped(url, {
        method: 'DELETE'
      }).then(function (_ref11) {
        var res = _ref11.res,
            body = _ref11.body;

        if (res.status === 404) {
          throw new RequestError('EDOCMISSING', 'Attachment is not found', body);
        }

        if (res.status !== 200) {
          throw new RequestError('EUNKNOWN', "Unexpected status code while deleting attachment: ".concat(res.status), body);
        }

        return {
          data: body,
          headers: res.headers,
          status: res.status
        };
      });
    }
    /**
     * Calls an update function in the database. Returns a promise which is
     * - resolved with {data, headers, status} object
     * - rejected with `request` original error
     *
     * @param  {String} dbName             database name
     * @param  {String} designDocument     design document name
     * @param  {String} updateFunctionName update function name
     * @param  {Object} queryString        query string parameters
     * @param  {String} docId              document id
      * @return {Promise}
     */

  }, {
    key: "updateFunction",
    value: function updateFunction(dbName, designDocument, updateFunctionName, queryString, docId) {
      var method = docId ? 'PUT' : 'POST';
      queryString = queryString || {};
      var url;

      if (method === 'PUT') {
        url = new URL("".concat(this._baseUrl, "/").concat(dbName, "/_design/").concat(designDocument, "/_update/").concat(updateFunctionName, "/").concat(docId));
      } else {
        url = new URL("".concat(this._baseUrl, "/").concat(dbName, "/_design/").concat(designDocument, "/_update/").concat(updateFunctionName));
      }

      for (var prop in queryString) {
        url.searchParams.set(prop, queryString[prop]);
      }

      return this._fetchWrapped(url, {
        method: method
      }).then(function (_ref12) {
        var res = _ref12.res,
            body = _ref12.body;

        if (res.status === 404) {
          throw new RequestError('EDOCMISSING', 'Design document is not found', body);
        }

        if (res.status !== 200 && res.status !== 201 && res.status !== 202) {
          throw new RequestError('EUNKNOWN', "Unexpected status code while calling update function: ".concat(res.status), body);
        }

        return {
          data: body,
          headers: res.headers,
          status: res.status
        };
      });
    }
    /**
     * Get UUIDs for new documents. Returns a promise which is
     * - resolved with array of new unique ids
     * - rejected with `request` original error
     *
     * @param {Number} [count = 1] number of IDs you want to get
     * @return {Promise}
     */

  }, {
    key: "uniqid",
    value: function uniqid() {
      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var url = new URL("".concat(this._baseUrl, "/_uuids"));
      url.searchParams.set('count', count);
      return this._fetchWrapped(url).then(function (_ref13) {
        var body = _ref13.body;
        return body.uuids;
      });
    }
    /**
     * Check the status code of a documentation manipulation like INSERT, UPDATE, DELETE
     *
     * @param {Number} statusCode
     * @param {Object} body
     * @throws {RequestError}
     */

  }, {
    key: "_checkDocumentManipulationStatus",
    value: function _checkDocumentManipulationStatus(statusCode, body) {
      if (statusCode === 400) {
        throw new RequestError('EBADREQUEST', 'Invalid request body or parameters', body);
      }

      if (statusCode === 401) {
        throw new RequestError('EUNAUTHORIZED', 'Write privileges required', body);
      }

      if (statusCode === 404) {
        throw new RequestError('EDOCMISSING', 'Document not found', body);
      }

      if (statusCode === 409) {
        throw new RequestError('EDOCCONFLICT', 'Document insert conflict', body);
      }
    }
    /**
     * Requests wrapper. Checks for cache first for GET requests.
     * Should be invoked with arguments suitable for `request`
     *
     * @return {Promise}
     */

  }, {
    key: "_fetchWrapped",
    value: function () {
      var _fetchWrapped2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url, opts) {
        var _this8 = this;

        var cacheKey, whenCacheChecked;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                opts = opts || {};
                cacheKey = this._getCacheKey(url);
                whenCacheChecked = !this._cache || opts.method && opts.method !== 'GET' ? Promise.resolve({}) : this._cache.get(cacheKey);
                return _context2.abrupt("return", whenCacheChecked.then(function (cache) {
                  // cache plugin returns null if record doesn't exist
                  var _ref14 = cache || {},
                      etag = _ref14.etag,
                      cacheBody = _ref14.body;

                  return new Promise( /*#__PURE__*/function () {
                    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resolve, reject) {
                      var controller, timeout, res, data, contentType;
                      return _regeneratorRuntime().wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              opts = Object.assign(_objectSpread({}, _this8._fetchDefaultOpts), opts);

                              if (etag) {
                                opts.headers = opts.headers || {};
                                opts.headers['if-none-match'] = etag;
                              }

                              controller = new _abortController["default"]();
                              timeout = setTimeout(function () {
                                return controller.abort();
                              }, _this8._timeoutMs);
                              opts.signal = controller.signal;
                              _context.prev = 5;
                              _context.next = 8;
                              return (0, _nodeFetch["default"])(url, opts);

                            case 8:
                              res = _context.sent;
                              data = null;

                              if (!res.ok) {
                                _context.next = 22;
                                break;
                              }

                              contentType = res.headers.get('content-type');

                              if (!contentType.includes('application/json')) {
                                _context.next = 18;
                                break;
                              }

                              _context.next = 15;
                              return res.json();

                            case 15:
                              data = _context.sent;
                              _context.next = 22;
                              break;

                            case 18:
                              if (!contentType.includes('text/html')) {
                                _context.next = 22;
                                break;
                              }

                              _context.next = 21;
                              return res.text();

                            case 21:
                              data = _context.sent;

                            case 22:
                              resolve({
                                res: res,
                                body: data || cacheBody
                              });
                              _context.next = 28;
                              break;

                            case 25:
                              _context.prev = 25;
                              _context.t0 = _context["catch"](5);
                              reject(_context.t0);

                            case 28:
                              _context.prev = 28;
                              clearTimeout(timeout);
                              return _context.finish(28);

                            case 31:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee, null, [[5, 25, 28, 31]]);
                    }));

                    return function (_x3, _x4) {
                      return _ref15.apply(this, arguments);
                    };
                  }());
                }));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _fetchWrapped(_x, _x2) {
        return _fetchWrapped2.apply(this, arguments);
      }

      return _fetchWrapped;
    }()
    /**
     * Gets cache key built from request options
     *
     * @param {Object} requestOpts
     * @return {String}
     */

  }, {
    key: "_getCacheKey",
    value: function _getCacheKey(url) {
      var cacheKeyFull = url.toString();
      return _crypto["default"].createHash('md5').update(cacheKeyFull).digest('hex');
    }
    /**
     * @param {String} serverHeader
     * @param {Number} minServerVersion
     */

  }, {
    key: "_checkServerVersion",
    value: function _checkServerVersion(serverHeader) {
      var minServerVersion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var serverVersion = serverHeader.match(/^CouchDB\/([\d]+)/);

      if (!serverVersion || !serverVersion[1]) {
        throw new RequestError('ESERVERNOTSUPPORTED', "Server is not supported: ".concat(serverHeader));
      }

      if (serverVersion[1] < minServerVersion) {
        throw new RequestError('ESERVEROLD', "Server version is too old for using this API: ".concat(minServerVersion, " (expected), ").concat(serverHeader, " (actual)"));
      }
    }
  }]);

  return NodeCouchDB;
}();

exports["default"] = NodeCouchDB;
;
